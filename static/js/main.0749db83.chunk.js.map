{"version":3,"sources":["img/forecast/006-thunderstorm.svg","img/forecast/019-raining.svg","img/forecast/023-rain-4.svg","img/forecast/016-snowing-1.svg","img/forecast/031-cloudy.svg","img/forecast/013-sunny.svg","img/forecast/035-cloud.svg","serviceWorker.js","redux/store.js","redux/reducers.js","redux/actions.js","components/Search/Search.jsx","utils/functions.js","components/Info/Dashboard.jsx","components/Info/Info.jsx","components/Slider/Slider.jsx","components/Background/Background.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","data","current","forecast","search","undefined","store","createStore","state","type","payload","__REDUX_DEVTOOLS_EXTENSION__","handleSearch","cities","Search","_","useStore","dispatch","useDispatch","pushDataToState","fetch","then","response","ok","json","coord","lat","lon","setForecast","Math","round","random","length","getState","className","onSubmit","e","preventDefault","trim","handleSubmit","placeholder","defaultValue","onChange","target","value","setSearchValue","getDay","number","getMonth","getIcon","id","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Dashboard","connect","Object","keys","src","weather","alt","main","temp","toFixed","feels_like","Date","getDate","getFullYear","Info","humidity","pressure","wind","speed","deg","createInfoItems","Slider","useState","innerWidth","size","setSize","useEffect","addEventListener","daily","map","i","k","key","now","min","max","day","night","eve","morn","slidesPerView","loop","renderDynamicSlides","Background","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0749db83.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/006-thunderstorm.a3ae7e9e.svg\";","module.exports = __webpack_public_path__ + \"static/media/019-raining.f334d20a.svg\";","module.exports = __webpack_public_path__ + \"static/media/023-rain-4.66e73bdb.svg\";","module.exports = __webpack_public_path__ + \"static/media/016-snowing-1.d416e972.svg\";","module.exports = __webpack_public_path__ + \"static/media/031-cloudy.a510d1e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/013-sunny.fa3a4662.svg\";","module.exports = __webpack_public_path__ + \"static/media/035-cloud.e12bfaaf.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore } from 'redux';\nimport { rootReducer } from './reducers';\n\nexport const initialState = {\n  data: {\n    current: {},\n    forecast: {}\n  },\n  search: undefined\n}\n\nexport const store = createStore(\n  rootReducer,\n  initialState,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n)","export const rootReducer = (state, { type, payload }) => {\n  switch (type) {\n    case 'SET_CURRENT':\n      return {\n        ...state,\n        data: { ...state.data, current: payload }\n      }; \n\n    case 'SET_FORECAST':\n      return {\n        ...state,\n        data: { ...state.data, forecast: payload }\n      }; \n\n    case 'HANDLE_SEARCH':\n      return {\n        ...state,\n        search: payload\n      }\n\n    default: \n      return { \n        ...state \n      };\n  }\n}","export const setCurrent = payload => {\n  return { \n    type: 'SET_CURRENT',\n    payload\n  }\n};\n\nexport const setForecast = payload => {\n  return { \n    type: 'SET_FORECAST',\n    payload\n  }\n};\n\nexport const handleSearch = payload => {\n  return {\n    type: 'HANDLE_SEARCH',\n    payload\n  }\n}","import React from 'react';\nimport { useStore, useDispatch } from 'react-redux';\nimport { handleSearch, setCurrent, setForecast } from '../../redux/actions';\n\nconst cities = [ 'Simferopol', 'Moscow', 'New York', 'Kiev', 'London', 'Istanbul'];\n\nexport const Search = _ => {\n  const store = useStore(); \n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    const { search } = store.getState(); \n\n    if(search && search.trim() !== '') {\n      let req = search;\n\n      return pushDataToState(req);\n    }\n  }\n\n  const setSearchValue = e => dispatch(handleSearch(e.target.value));\n\n  const pushDataToState = search => {\n    return fetch(`https://api.openweathermap.org/data/2.5/weather?q=${search}&appid=bdb758c73d929483146ad6c4d174a694`)\n    .then( response => {\n      if(response.ok) return response.json();\n    })\n    .then( data => {\n      if(data === undefined) return;\n      dispatch(setCurrent(data));\n\n      fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${data.coord.lat}&lon=${data.coord.lon}&exclude=current,minutely,hourly,alerts&appid=bdb758c73d929483146ad6c4d174a694`)\n      .then( response => { \n        if(response.ok) return response.json();\n      })\n      .then( data => {\n        if(data === undefined) return;\n        dispatch(setForecast(data));\n      })\n    })\n  };\n\n  dispatch(handleSearch(cities[Math.round(Math.random() * cities.length - 1)]));\n  pushDataToState(store.getState().search);\n\n  return(\n    <form className=\"search__bar\" onSubmit={ e => handleSubmit(e) }>\n      <input \n        type=\"text\" \n        placeholder=\"Your City\" \n        defaultValue={store.getState().search}\n        className=\"text--reg search__input\"\n        onChange={ e => setSearchValue(e) }\n      />\n      <span className=\"search__input-bg\"></span>\n\n      <input \n        type=\"submit\"\n        className=\"search__button\"\n        value=''\n      />\n    </form>\n  )\n}","import Thunderstorm from '../img/forecast/006-thunderstorm.svg';\nimport Drizzle from '../img/forecast/019-raining.svg'; \nimport Rain from '../img/forecast/023-rain-4.svg'; \nimport Snow from '../img/forecast/016-snowing-1.svg';\nimport Atmosphere from '../img/forecast/031-cloudy.svg';\nimport Clear from '../img/forecast/013-sunny.svg';   \nimport Clouds from '../img/forecast/035-cloud.svg';   \n\nexport const getDay = number => {\n  const days = [ 'Wen', 'Thu', 'Fri', 'Sat', 'Sun', 'Mon', 'Tue' ];\n  \n  return days[number % 7];\n}\n\nexport const getMonth = number => {\n  const months = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];\n  \n  return months[number];\n}\n\nexport const getIcon = id => {\n  if(id >= 200 && id < 300) return Thunderstorm;\n  else if(id >= 300 && id < 400) return Drizzle;\n  else if(id >= 500 && id < 600) return Rain;\n  else if(id >= 600 && id < 700) return Snow;\n  else if(id >= 700 && id < 800) return Atmosphere;\n  else if(id === 800) return Clear;\n  else if(id >= 801 && id < 900) return Clouds;\n}\n\nexport const getWindDirection = deg => {\n  if(deg >= 0 && deg < 45) return 'nw';\n  else if(deg >= 45 && deg < 90) return 'n';\n  else if(deg >= 90 && deg < 135) return 'ne';\n  else if(deg >= 135 && deg < 180) return 'e';\n  else if(deg >= 180 && deg < 225) return 'se';\n  else if(deg >= 225 && deg < 270) return 's';\n  else if(deg >= 270 && deg < 315) return 'sw';\n  else if(deg >= 315 && deg < 360) return 'w';\n}","import React from 'react';\nimport { connect, useStore } from 'react-redux';\n\nimport { getIcon, getDay, getMonth } from '../../utils/functions';\n\nconst mapStateToProps = state => ( { current: state.data.current })\n\nexport const Dashboard = connect(mapStateToProps)(\n  _ => {\n    const store = useStore();\n\n    const { current } = store.getState().data;\n\n    return(\n      <section className=\"dashboard\">\n        { \n          Object.keys(current).length === 0 ? \n            <></> : \n            <>\n              <div className=\"dashboard__icon\">\n                <img src={getIcon(current.weather[0].id)} alt={getIcon(current.weather[0].main)} className=\"dashboard__icon-image\"/>\n                <p className=\"text text--reg dashboard__icon-text\">\n                  {current.weather[0].main}\n                </p>\n              </div>\n              <div className=\"dashboard__temperature\">\n                <h1 className=\"text text--header dashboard__temperature-text--main\">\n                  {(Math.round(current.main.temp - 273.15)).toFixed(1)}&deg;C\n                </h1>\n                <h3 className=\"text text--orange text--header dashboard__temperature-text--fl\">\n                  Feels like {(Math.round(current.main.feels_like - 273.15)).toFixed(1)}&deg;C\n                </h3>\n              </div>\n              <div className=\"dashboard__date\">\n                <p className=\"text text--reg dashboard__date-text\">\n                  {getDay(new Date().getDate())}, <span className=\"text--orange\">{new Date().getDate()} {getMonth(new Date().getMonth())} {new Date().getFullYear()}</span>\n                </p>\n              </div> \n            </>\n        }\n      </section>\n    );\n  }\n);\n","import React from 'react';\nimport { connect, useStore } from 'react-redux';\n\nimport { getWindDirection } from '../../utils/functions';\n\nconst mapStateToProps = state => ({ current: state.data.current });\n\nexport const Info = connect(mapStateToProps)(\n  _ => {\n    const store = useStore();\n    \n    const { current } = store.getState().data;\n\n    const createInfoItems = _ => {\n      return(\n        <>\n          <li className=\"text text--reg info__item\">\n            <p className=\"text info__text--key info__text--humidity\">Humidity</p>\n            <strong className=\"text info__text--value\">{current.main.humidity}%</strong>\n          </li>\n          <li className=\"text text--reg info__item\">\n            <p className=\"text info__text--key info__text--pressure\">Air pressure</p>\n            <strong className=\"text info__text--value\">{(current.main.pressure * 0.750063755419211).toFixed(2)}mm</strong>\n          </li>\n          <li className=\"text text--reg info__item\">\n            <p className=\"text info__text--key info__text--wind\">Wind</p>\n            <strong className=\"text info__text--value\">{current.wind.speed}m/s <span className={`info__icon info__icon--direction-${getWindDirection(current.wind.deg)}`}></span></strong>\n          </li>\n        </>\n      )\n    }\n\n    return(\n      <ul className=\"list info\">\n        {\n          Object.keys(current).length === 0 ? \n          <></> :\n          <>\n            { createInfoItems() }\n          </>\n        }\n      </ul>\n    );\n  }\n)","import React, { useState, useEffect } from 'react';\nimport { connect, useStore } from 'react-redux';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport 'swiper/swiper.scss';\n\nimport { getIcon, getDay, getMonth } from '../../utils/functions';\n\nconst mapStateToProps = state => ({ forecast: state.data.forecast });\n\nexport const Slider = connect(mapStateToProps)(\n  _ => {\n    const [ size, setSize ] = useState(window.innerWidth);\n    const store = useStore()\n    \n    const { forecast } = store.getState().data;\n    \n    useEffect( _ => {\n      window.addEventListener('resize', _ => setSize(window.innerWidth));\n      window.addEventListener('rotationchange', _ => setSize(window.innerWidth));\n    })\n\n    const renderStaticSlides = data => {\n      return(\n        <ul className=\"list slider\">\n        {\n          data.map( (i, k) => {\n            const { temp, feels_like, weather } = i;\n  \n            return(\n              <li className=\"text--center slider__item\" key={k}>\n                <p className=\"text text--reg slider__item-text--date\">\n                  {getDay(new Date().getDate() + (k + 1))}, {new Date().getDate() + (k + 1)}&nbsp; \n                  {getMonth(new Date(Date.now() + 1000 * 60 * 60 * 24 * (k + 1)).getMonth())}&nbsp; \n                  {new Date(Date.now() + 1000 * 60 * 60 * 24 * (k + 1)).getFullYear()}\n                </p>\n                <img src={getIcon(weather[0].id)} alt={weather[0].main} className=\"slider__item-logo\"/>\n                <div>\n                  <p className=\"text text--reg slider__item-text--temperature\">\n                    {(Math.round((temp.min + temp.max) / 2 - 273.15)).toFixed(1)}&deg;C\n                  </p>\n                  <p className=\"text text--orange text--reg slider__item-text--fl\">\n                    Feels like {(Math.round((feels_like.day + feels_like.night + feels_like.eve + feels_like.morn) / 4 - 273.15)).toFixed(1)}&deg;C\n                  </p>\n                </div>\n              </li>\n            )\n          }) \n        }\n        </ul>\n      ) \n    };\n\n    const renderDynamicSlides = data => {\n      return(\n        <Swiper\n          slidesPerView={3}\n          loop={false}\n          className=\"slider\"\n        >\n          {\n            data.map( (i, k) => {\n              const { temp, feels_like, weather } = i;\n    \n              return(\n                <SwiperSlide className=\"text--center slider__item\" key={k}>\n                  <p className=\"text text--reg slider__item-text--date\">\n                    {getDay(new Date().getDate() + (k + 1))}, {new Date().getDate() + (k + 1)}&nbsp; \n                    {getMonth(new Date(Date.now() + 1000 * 60 * 60 * 24 * (k + 1)).getMonth())}&nbsp; \n                    {new Date(Date.now() + 1000 * 60 * 60 * 24 * (k + 1)).getFullYear()}\n                  </p>\n                  <img src={getIcon(weather[0].id)} alt={weather[0].main} className=\"slider__item-logo\"/>\n                  <div>\n                    <p className=\"text text--reg slider__item-text--temperature\">\n                      {(Math.round((temp.min + temp.max) / 2 - 273.15)).toFixed(1)}&deg;C\n                    </p>\n                    <p className=\"text text--orange text--reg slider__item-text--fl\">\n                      Feels like {(Math.round((feels_like.day + feels_like.night + feels_like.eve + feels_like.morn) / 4 - 273.15)).toFixed(1)}&deg;C\n                    </p>\n                  </div>\n                </SwiperSlide>\n              )\n            }) \n          }\n        </Swiper>\n      ) \n    };\n\n    if(Object.keys(forecast).length === 0 ) return null;\n    else return (\n      <>\n        { size > 1024 ? renderStaticSlides(forecast.daily) : renderDynamicSlides(forecast.daily) }\n      </>\n    )\n  }\n)","import React from 'react';\n\nexport const Background = _ => {\n  return(\n    <div className=\"app__background-wrapper\">\n      <div className=\"app__background\"></div>\n    </div>\n  )\n}","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nimport { Search } from '../src/components/Search/Search';\nimport { Dashboard } from '../src/components/Info/Dashboard';\nimport { Info } from '../src/components/Info/Info';\nimport { Slider } from '../src/components/Slider/Slider';\n\nimport './scss/main.scss';\nimport { Background } from './components/Background/Background';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Background/>\n      <Search />\n      <Dashboard />\n      <Slider />\n      <Info />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}